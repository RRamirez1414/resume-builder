const mongoose = require('mongoose')
const bcrypt = require('bcryptjs')
const Schema = mongoose.Schema

//_id is auto generated by mongoose
const userSchema = new Schema({
    firstName: {
        type: String,
        required: true
    },
    lastName: {
        type: String,
        required: true
    },
    username: {
        type: String,
        required: true,
        unique: true
    },
    password: {
        type: String,
        required: true
    }
}, { collection: 'user', timestamps: true})

//function that hashes the password before being saved to the database collection
userSchema.pre("save", function (next) {
    const user = this

    if(this.isModified("password") || this.isNew){
        bcrypt.genSalt(10, function (saltError, salt) {
            if(saltError) {
                return next(saltError)
            } else {
                bcrypt.hash(user.password, salt, function(hashError, hash) {
                    if(hashError){
                        return next(hashError)
                    }
                })

                user.password = hash
                next()
            }
        })
    } else {
        return next()
    }
})

//method to compare passwords submitted by user in login page to verify user
userSchema.methods.comparePassword = function(password, callback) {
    bcrypt.compare(password, this.password, function(error, isMatch) {
        if(error) {
            return callback(error)
        } else {
            callback(null, isMatch);
        }
    })
}

module.exports = module.model("User", UserSchema)